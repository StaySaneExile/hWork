{"version":3,"sources":["App.module.css","hw3/Button.module.css","hw3/Span.module.css","hw3/Names.module.css","hw3/Button.jsx","hw3/Span.jsx","hw3/Names.jsx","hw3/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","render","props","className","classes","button","onClick","plus","React","Component","Span","span","text","Names","drawName","title","map","name","main","Input","input","ref","this","App","createRef","state","def","count","names","newName","current","value","setState","alert","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,OAAS,oBAAoB,KAAO,kBAAkB,MAAQ,mBAAmB,KAAO,oB,mBCAnID,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,sB,4NCiBVC,E,4MAZXC,OAAS,SAACC,GACN,OACI,6BACI,4BAAQC,UAAWC,IAAQC,OACnBC,QAAU,EAAKJ,MAAMK,MAD7B,c,YALKC,IAAMC,W,gBCWZC,E,4MAVXT,OAAS,SAACC,GACN,OACI,6BACA,0BAAMC,UAAWC,IAAQO,MACpB,EAAKT,MAAMU,Q,YALTJ,IAAMC,W,iBCgBVI,E,4MAdXZ,OAAS,SAACC,GAEN,IAAIY,EAAW,EAAKZ,MAAMa,MAAMC,KAAI,SAAAC,GAAI,OAAI,8BAAOA,EAAKA,SAExD,OACI,yBAAKd,UAAWC,IAAQc,MACnBJ,I,YARGN,IAAMC,WCSXU,E,uKARP,OACI,6BACI,2BAAOhB,UAAWC,IAAQgB,MACnBC,IAAKC,KAAKpB,MAAMU,Y,GALnBJ,IAAMC,WC0CXc,E,4MAnCXX,KAAOJ,IAAMgB,Y,EACbC,MAAQ,CACJC,IAAK,CACDC,MAAO,EACPZ,MAAO,UAEXa,MAAO,CACH,CAACX,KAAM,gB,EAIfV,KAAO,WACH,IAAIsB,EAAU,CAACZ,KAAM,EAAKL,KAAKkB,QAAQC,OACvC,EAAKC,SACD,CAACJ,MAAM,GAAD,mBAAM,EAAKH,MAAMG,OAAjB,CAAwBC,MAClC,EAAKG,SACD,CAACN,IAAK,CAACC,MAAO,EAAKF,MAAMC,IAAIC,MAAQ,KACzCM,MAAM,EAAKR,MAAMC,IAAIX,MAAQ,EAAKH,KAAKkB,QAAQC,OAC/C,EAAKnB,KAAKkB,QAAQC,MAAQ,I,uDAI1B,OACI,yBAAK5B,UAAWC,IAAQc,MACpB,yBAAKf,UAAWC,IAAQa,MACpB,kBAAC,EAAD,CAAOF,MAAOO,KAAKG,MAAMG,SAE7B,kBAAC,EAAD,CAAQrB,KAAMe,KAAKf,OACnB,kBAAC,EAAD,CAAMK,KAAMU,KAAKG,MAAMC,IAAIC,QAC3B,kBAAC,EAAD,CAAOf,KAAMU,KAAKV,Y,GA/BhBJ,IAAMC,WCIJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3602e9d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1Gx_E\",\"button\":\"App_button__3YkK5\",\"span\":\"App_span__3UG5U\",\"input\":\"App_input__uu7Vb\",\"name\":\"App_name__3xqa5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3VaRm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Span_span__1GSgI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Names_main__1nN82\"};","import React from 'react';\nimport classes from './Button.module.css';\n\n\nclass Button extends React.Component {\n\n    render = (props) => {\n        return (\n            <div>\n                <button className={classes.button}\n                        onClick= {this.props.plus} >\n                    Milkyway\n                </button>\n            </div>\n\n        )\n    }\n}\nexport default Button;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from 'react';\nimport classes from \"./Span.module.css\";\n\n\nclass Span extends React.Component {\n    render = (props) => {\n        return (\n            <div>\n            <span className={classes.span}>\n                {this.props.text}\n            </span>\n            </div>\n        )\n    }\n}\nexport default Span;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from 'react';\nimport classes from './Names.module.css';\n\n\nclass Names extends React.Component {\n\n    render = (props) => {\n\n        let drawName = this.props.title.map(name => <span>{name.name}</span>)\n\n        return (\n            <div className={classes.main}>\n                {drawName}\n            </div>\n\n\n        )\n    }\n}\n\nexport default Names;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from \"react\";\r\nimport classes from \"../App.module.css\";\r\n\r\nclass Input extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input className={classes.input}\r\n                       ref={this.props.text}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input;","import React from 'react';\nimport classes from './App.module.css';\nimport Button from \"./hw3/Button\";\nimport Span from \"./hw3/Span\";\nimport Names from \"./hw3/Names\";\nimport Input from \"./hw3/Input\";\n\n\nclass App extends React.Component {\n\n    text = React.createRef();\n    state = {\n        def: {\n            count: 6,\n            title: 'Hello '\n        },\n        names: [\n            {name: 'Gadjimurad'},\n        ]\n    };\n\n    plus = () => {\n        let newName = {name: this.text.current.value};\n        this.setState(\n            {names: [...this.state.names, newName]});\n        this.setState(\n            {def: {count: this.state.def.count + 1}});\n        alert(this.state.def.title + this.text.current.value);\n        this.text.current.value = \"\";\n    };\n\n    render() {\n        return (\n            <div className={classes.main}>\n                <div className={classes.name}>\n                    <Names title={this.state.names}/>\n                </div>\n                <Button plus={this.plus}/>\n                <Span text={this.state.def.count}/>\n                <Input text={this.text}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport state from \"./state\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}