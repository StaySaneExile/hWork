{"version":3,"sources":["App.module.css","hw3/Monday.module.css","hw3/Monday/Names.module.css","hw3/Monday/Button.module.css","hw3/Monday/Span.module.css","hw3/Burger.jsx","hw3/Navbar.jsx","hw3/Monday/Names.jsx","hw3/Monday/Button.jsx","hw3/Monday/Span.jsx","hw3/Monday/Input.jsx","hw3/Monday.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Burger","props","onClick","this","className","React","Component","Navbar","state","filterValue","changeFilter","newFilterValue","setState","onFilterActive","render","classForNav","activeClassName","to","Names","drawName","names","map","name","classes","main","Button","button","plus","Span","span","count","Input","error","changeValue","e","changeInputValue","currentTarget","value","onKeyPress","key","onChange","inputValue","Monday","App","def","title","alert","newTitle","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e2d9ff79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1Gx_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Monday_main__2H_tX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Names_main__wQXPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__358Qc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Span_span__244Yl\"};","import React from 'react';\nimport  './Navbar.css';\n\n\nclass Burger extends React.Component {\n\n    render (props) {\n        return (\n            <div onClick={this.props.onClick} className='burger'> </div>\n        )\n    }\n}\nexport default Burger;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from 'react';\nimport \"./Navbar.css\";\nimport {NavLink} from \"react-router-dom\";\nimport Burger from \"./Burger\";\n\n\nclass Navbar extends React.Component {\n    state = {\n        filterValue: 'nav'\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({filterValue: newFilterValue})\n    }\n    onFilterActive = () => {\n        if (this.state.filterValue === 'navActive') {\n            this.changeFilter('nav')\n        } else {\n            this.changeFilter('navActive')\n        }\n\n    }\n\n    render = (props) => {\n\n        let classForNav = this.state.filterValue === 'nav' ? 'nav' : 'navActive';\n\n        return (\n            <div className={classForNav}>\n                <div className='main'>\n                    <Burger onClick={this.onFilterActive}/>\n                    <div className='item'>\n                        <NavLink activeClassName='active' to='/monday'>Monday</NavLink>\n                    </div>\n                    <div className='item'>\n                        <NavLink activeClassName='active' to='/tuesday'>Tuesday</NavLink>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Navbar;\n\n","import React from 'react';\nimport classes from './Names.module.css';\n\n\nclass Names extends React.Component {\n\n    render  ()  {\n\n        let drawName = this.props.names.map(name => <span>{name.name}</span>)\n\n        return (\n            <div className={classes.main}>\n                {drawName}\n            </div>\n\n\n        )\n    }\n}\n\nexport default Names;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from 'react';\nimport classes from './Button.module.css';\n\n\nclass Button extends React.Component {\n\n    render (props) {\n        return (\n            <div>\n                <button className={classes.button}\n                        onClick= {this.props.plus} >\n                    Milkyway\n                </button>\n            </div>\n\n        )\n    }\n}\nexport default Button;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from 'react';\nimport classes from \"./Span.module.css\";\n\n\nclass Span extends React.Component {\n    render  ()  {\n        return (\n            <div>\n            <span className={classes.span}>\n                {this.props.count}\n            </span>\n            </div>\n        )\n    }\n}\nexport default Span;\n\n//домашка от меня №3: создать компоненту, у которой:\n// - есть спан с числом, инпут и кнопка\n// - при нажатии на кнопку число в спане увеличивается на 1\n// - при нажатии на кнопку вызывается алерт с приветствием имени, введённым в инпуте\n// - при нажатии на кнопку инпут должен очиститься\n// (!!! обязательно проверить работу самому !!!)","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nclass Input extends React.Component {\r\n    state = {\r\n        error: true\r\n    }\r\n\r\n    changeValue = (e) => {\r\n            this.setState({error: false})\r\n            this.props.changeInputValue(e.currentTarget.value)\r\n        if(e.currentTarget.value === \"\") {\r\n            this.setState({error: true})\r\n        }\r\n    }\r\n    onKeyPress = (e) => {\r\n        if(e.key === 'Enter') {\r\n            this.props.plus();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let error = this.state.error ? \"error\" : \"input\";\r\n        return (\r\n            <div>\r\n                <input className={error}\r\n                       onKeyPress={this.onKeyPress}\r\n                       onChange={this.changeValue}\r\n                       value={this.props.inputValue}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input;\r\n//- в своём проекте (домашка №4) вынести инпут в\r\n// отдельную компоненту (если вы этого не сделали) и \"прокачать\" его\r\n//   1. подсветка при попытке ввести пустое значение,\r\n//   2. отправка текста по нажатию \"Enter\",\r\n//   3. сделать его контролируемым (локальный стейт, как на уроке))\r\n// ...что бы не прокачивать в будущем каждый инпут, а использовать уже готовый\r\n// (или \"допрокачивать\" готовый) установите в свой проект react-router-dom и используя\r\n// <HashRouter> вместо <BrowserRouter> (так как он лучше работает на gh-pages)\r\n// сделайте 2 страницы: понедельник, вторник (подсмотрите в соцсети \"как\" или смело обращайтесь на\r\n// \"хэлп\" по любым вопросам), всё сделанное (домашка №4) отобразите на странице понедельника\r\n// - сделайте выезжающий сбоку/сверху/снизу (на выбор/или все сразу для практики)\r\n// навбар со списком страниц, обёрнутых в <NavLink> со ссылками на соответствующие\r\n// страницы, текущую страницу в списке подсвечивать","import React from 'react';\nimport classes from \"./Monday.module.css\";\nimport Names from \"./Monday/Names\";\nimport Button from \"./Monday/Button\";\nimport Span from \"./Monday/Span\";\nimport Input from \"./Monday/Input\";\n\n\nclass Monday extends React.Component {\n    render ()  {\n        return (\n            <div className={classes.main}>\n                <Names names={this.props.names} />\n                <Button plus={this.props.plus} />\n                <Span count={this.props.count} />\n                <Input changeInputValue={this.props.changeInputValue}\n                       inputValue={this.props.inputValue}\n                       plus={this.props.plus}  />\n            </div>\n        )\n    }\n}\nexport default Monday;\n\n","import React from 'react';\nimport classes from './App.module.css';\nimport Navbar from \"./hw3/Navbar\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Monday from \"./hw3/Monday\";\n\n\nclass App extends React.Component {\n\n    state = {\n        def: {\n            count: 8,\n            title: 'Hello '\n        },\n        names: [\n            {name: 'Gadjimurad'},\n        ],\n        inputValue: \"\",\n        title: \"\"\n\n    };\n    plus = () => {\n        this.setState(\n            {def : {count: this.state.def.count + 1},\n            title: this.state.inputValue,\n            names: [...this.state.names, {name: this.state.inputValue}]\n        })\n        alert(\"Hello \" + this.state.inputValue);\n        this.state.inputValue = '';\n\n    };\n\n    changeInputValue = (newTitle) => {\n        this.setState({\n            inputValue: newTitle\n        });\n    }\n    render() {\n        return (\n            <HashRouter>\n                <div className={classes.main}>\n                    <Navbar />\n                    <Route path='/monday' render={() =>\n                        <Monday names={this.state.names}\n                                inputValue={this.state.inputValue}\n                                plus={this.plus}\n                                changeInputValue={this.changeInputValue}\n                                count={this.state.def.count}  />}/>\n                </div>\n            </HashRouter>\n        )\n    }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport state from \"./state\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}